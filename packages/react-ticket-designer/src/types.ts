export type modelObject = {
    id: string,
    type: string,
    selected?: boolean,
    focused?: boolean,
    rotated?: boolean,
    resized?: boolean,
    dragged?: boolean,
    group?: string,
    x?: number,
    y?: number,
    width?: number,
    height?: number,
    transform?: string,
    data?: any,
}

export type dataModel = {
    objects: {[key: string]: any},
    dragged: {[id: string]: boolean},
    dragging: boolean,
    resized: {[id: string]: boolean},
    resizing: boolean,
    rotated: {[id: string]: boolean},
    rotating: boolean,
    selected: {[id: string]: boolean},
    selecting: boolean,
    focused: {[id: string]: boolean},
    focusing: boolean,
    background: any,
};

export type file = {
    name: string,
    content: string,
    contentType: string,
}

export type model = {
    getFile: () => file,
    isDragging: () => boolean,
    isResizing: () => boolean,
    isRotating: () => boolean,
    isFocusing: () => boolean,
    isSelecting: () => boolean,
    getObjects: () => modelObject[],
    mapObjects: (callback: (o: modelObject) => void) => any[],
    clickBackground: () => void,
    clickObject: (id: string) => void,
    mouseEnterObject: (id: string) => void,
    mouseLeaveObject: (id: string) => void,
    startDraggingObject: (id: string) => void,
    stopDraggingObject: (id: string) => void,
    startResizingObject: (id: string) => void,
    stopResizingObject: (id: string) => void,
    startRotatingObject: (id: string) => void,
    stopRotatingObject: (id: string) => void,
    toggleDragging: (e: {stopPropagation: Function}) => void,
    toggleResizing: (e: {stopPropagation: Function}) => void,
    toggleRotating: (e: {stopPropagation: Function}) => void,
    toggleSelecting: (e: {stopPropagation: Function}) => void,
    toggleFocusing: (e: {stopPropagation: Function}) => void,
    toggleSelectObject: (id: string) => void,
    addObject: (o: any) => void,
    addTextObject: (text: string) => void,
    addImageObject: (image: string) => void,
    addShapeObject: (type: string, definition?: any) => void,
    getBackground: () => any,
    removeObject: (id: string) => void,
    resizeObject: (id: string, size: any, position: any) => void,
    moveObject: (id: string, position: any) => void,
    rotateObject: (id: string, position: any, rotation: any) => void,
    unselectAllObjects: () => void,
    unfocusAllObjects: () => void,
    selectObject: (id: string) => void,
    focusObject: (id: string) => void,
    unselectObject: (id: string) => void,
    unfocusObject: (id: string) => void,
    setBackground: (setting: any) => void,
    setBackgroundColor: (color: string) => void,
}